#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @File  : cp4_1_2.py
# @Author: WRH
# @Date  : 2021/3/13
# @Edition:Python3.8.6

# 列表
"""
列表（list）数据类型可存储由多个值组成的序列。在列表中，值可以是任何数据类型，称为元素（element）或项（item）。
列表是有序的:
利用方括号运算符[ ]可以通过索引值得到相应位置（下标）的元素
格式：s[i]，列表变量名[索引值]，
从前往后是正向索引，对于元素总数为n的列表，其索引值范围为0到n-1
从后向前是负数索引，对于元素总数为n的列表，其索引值范围为-1到-n
下标越界会抛出异常
列表是动态的：
可以自由改变列表长度，将任何数据类型混合放入单个列表中
"""

# 1.列表的创建
# 将逗号分隔的不同的数据项使用方括号[]括起来即可创建列表
list1 = ['physics', 'chemistry', '1997', '2000']
print(list1)
list2 = [1, 2, 3, "a", "b", "c"]
print(list2)
# 在列表中，值可以是任何数据类型
list3 = [1, 'str', ['name', 'goofy'], ('a', 'b'), {'a': '1', 'b': '3'}, {1, 2}]
print(list3)
# 列表允许嵌套，也就是说列表中的成员同样可以是列表，这样的列表称为多维列表例如：
list4 = [1, 'str', ['name', 'goofy']]
print(list4)
# 创建一个空的list
list5 = []
print(list5)

# 2.列表的基本操作
'''
操  作	                    含义
s[i]	                    索引 列表s的第i个元素（从0起算）
s[i:j:k]	                切片 列表s的第i个元素（含）起至第j个元素（不含），间隔为k的子列表。i默认为0，为0可省略，k默认为1，为1可省略。
s1+s2	                    将s1列表和s2列表连接成一个列表
s * n或n * s                 将列表s复制n次
len(s)	                    返回列表s的元素个数（长度）
for i in s                  对列表s中的元素进行循环操作
x in s 和 x not in s	    判断x是否是列表s的元素，返回布尔值True或False
del s                       删除列表s
del s[i]                    删除列表中位置索引为i的元素
min(s) 和 max(s)	        返回列表s中最小和最大的元素项,如果元素是字母，则按字母顺序进行比较。
'''

# 列表索引
list1 = [1, 2, 3, 4, 5, 6]  # 注意索引值从0开始
# 索引    0  1  2  3  4  5
# 负数索引-6 -5 -4 -3 -2 -1
print(list1[0], list1[5])
# print(list1[7]) # 下标溢出报错
# 多维列表的索引
list2 = [1, 2, 3, ['甲', '乙'], ['a', 'b', ['王者']]]
print(list2[4][2][0])  # list2是三维列表，4,2,0索引值分别对应第一、二、三维的元素

# 列表的切片
# 例4-3 列表切片举例。

list2 = [1, 2, 3, 4, 5, 6, 7]
print("list2[1:5]: ", list2[1:5])

l1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']
# 索引  0    1    2    3    4    5    6    7    8    9   10
#     -11  -10   -9   -8   -7   -6   -5   -4   -3   -2  -1
print(l1[0:2])  # 取区间[i,j)，左闭右开，包含索引值为i的元素，不包含索引值为j的元素,下同
print(l1[:2])  # 索引值i为0可省略
print(l1[2:])  # 索引值j值省略，默认输出到最后一个元素
print(l1[2:-1])  # 这里-1的索引值是11，所以-1可替换为10
print(l1[:])  # 索引值i,j都省略相当于直接输出整个列表
print(l1[::2])  # 步长2
print(l1[0:7:2])  # 索引值0到7的元素，步长为2
print(l1[7:0:-1])  # 注意步长为负值，就从索引值7（元素h）到索引值0（元素a）倒序取值，不包含索引值0（元素a）

# 列表的成员检查
lst = [1, 2, 3, 4]
print(3 in lst)
print(5 in lst)

# 列表中元素的更改
# 列表与字符串不同，列表中的元素可被更改，因此可以使用赋值语句改变列表中任意元素的值。
# 例4-4 列表元素的更改举例。
# 列表中单个元素的修改
lst = [1, 2, 3, 4]
print(lst[3])
lst[3] = "Hello"
print(lst)
lst[2] = 7
print(lst)
# 使用列表切片对列表中的多个元素进行修改
lst[1:3] = ["a", "b"]
print(lst)
# 多维列表中的元素修改
mlist = [['A', 'B', 'C'], [1, 2, 3], [4, 5, 6], [7, 8, 9]]
mlist[0][1] = 'D'
mlist[2][1] = 50
print(mlist)

# 使用运算符“*”和“+”可分别对列表中的元素进行复制或拼接
zeroes = [0]*6
print(zeroes)
print(2*['a'] + ['c']*3)

# 输出列表元素个数（或列表长度）
lst_num = [1, 2, 3, 4, 5, 6, 7]
print(len(lst_num))

# 返回列表中的最大值最小值
lst1 = ['1', '2', '3']
lst2 = ['a', 'c', 'b']
print(max(lst1))
print(min(lst2))

# 用对列表中元素循环操作可实现列表元素求和。
# 例4-5 列表元素求和举例。
s = [1, 2, 3, 4, 5, 6, 7, 8, 9]
sum_num = 0  # 设置求和初始值为0
for i in s:  # 对列表中的元素进行遍历
    sum_num = sum_num + i  # 求和
print("sum is", sum_num)

# weekday()方法的简介
'''
weekday()方法是Python中日历模块的内置方法。
它适用于简单的文本日历，并返回函数参数中给定的年，月和日的星期几的数字，
在这里，星期一对应的数字是0，依次类推，星期日对应的数字是6。
'''
import calendar

week = ['Monday', "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]  # 注意：索引值从0开始
year = 2022
month = 4
day = 13
week_num = calendar.weekday(year, month, day)  # 星期几对应的数字
print("Weekday number:", week_num)  # 输出星期几对应的数字
print("Weekday name:", week[week_num])  # 输出星期几

# 例4-6
'''
我国居民身份证号码由17位数字和1位校验码组成。其中，前6位为所在地编号，第7～14位为出生年月日，
第15～17位为登记流水号，其中第17位偶数为女性，奇数为男性。
校验码的生成规则为：将前面的身份证号码17位数分别乘以系数：
7, 9 ,10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2
然后将这17个乘积相加，结果与11求模，余数只可能是
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10这11种数字，它们分别对应的最后一位身份证的号码为
1, 0, X, 9, 8, 7, 6, 5, 4, 3, 2。例如，余数是2，最后一位数字就是罗马数字X，如果余数是10，则身份证的最后一位就是2。
现设计程序实现输入18位身份证号，辨别其真伪。若为真，则进一步判断性别；若不是18位或身份证号非法，则提示重新输入。
'''
factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
last = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']
while True:
    id = input('请输入身份证号，0则退出')
    if id == '0':
        break
    if len(id) != 18:
        print('输入位数不对，请重新输入')
        continue
    else:
        sum = 0
        for i in range(17):
            sum += int(id[i])*factor[i]  # 将身份证的每一位分别于对应的系数相乘，并求和
        m = sum % 11
        lastchar = id[-1]
        lastchar = lastchar.upper()    # 如果是字母变为大写可兼容输入小写x
        if lastchar == last[m]:
            print(id, '为合法身份证号码，', end='')
            if int(id[-2]) % 2 == 0:  # 索引值-2可以换成16，指身份证中第17位数字
                print('为女性')
            else:
                print('为男性')
        else:
            print(id, '为非法号码')


# 3.更多列表操作
'''
list.append(x)：在列表的末尾添加元素x，等价于a[len(a):] = [x]。
list.insert(i, x)：在给定位置插入元素，即在位置i处插入x，其余元素依次向后退。
                  因此，a.insert(0, x)意味着在列表的首部插入元素，而a.insert(len(a), x)等价于a.append(x)。
list.index(x)：返回列表中值为x的元素第一次出现的位置索引，若不存在则出错。
list.count(x)：返回x在列表中出现的次数。
list.sort(key=None, reverse=False)：对列表中的元素排序，默认为升序。不支持对既有数值又有字符的列表进行排序。
list.reverse()：将列表中元素的顺序反转。
list.copy()：返回列表的浅复制，等价于a[:]。
list.remove(x)：删除列表中第一个值为x的元素，若该元素不存在则出错。
list.extend(L)：在列表末尾加入指定列表L中的所有元素，等价于a[len(a):] = L或a+L。
list.pop([i])：删除列表中给定位置i处的元素，并返回该元素。若不指定索引值（list.pop），则移除并返回列表中的最后一个元素。
list.clear()：删除列表中的所有元素，等价于：del a[:]。
'''

# 例4-7 列表操作举例。
# 例4-7 列表操作举例。
a = [1, 2, 3] # 对列表a进行第一次赋值
b = ['a', 'b', 'c']
a.append(4)  # 注意：列表每进行一次操作就会被更新，列表中的元素就不一定和第一次赋值时元素完全相同了
print(a)
a.insert(2, -1)  # 插入元素，此时的列表a = [1, 2, 3, 4]
print(a)
print(a.index(4))  # 某个元素的下标，此时的列表a = [1, 2, -1, 3, 4]
print(a.count(4))
a.sort()  # 列表排序
print(a)
a.reverse()  # 列表顺序反转
print(a)
print(a.copy())  # 列表浅复制
a.remove(4)  # 移除列表中的元素
print(a)
a.extend(b)  # 列表末尾加入另一个列表的元素
print(a)
a.pop()  # 删除列表中的元素
print(a)
print(a.pop())  # 输出删除列表中的那个元素
b.clear()  # 清除列表中所有元素
print(b)

# 如何将列表中的某一个元素全部删除（了解内容）
lst = [1, 2, 3, 3, 3]
for num in lst[:]:
    if num == 3:
        lst.remove(num)
print(lst)

# 列表的浅复制与深复制（了解内容）
'''
直接赋值：其实就是对象的引用（别名）。（始终相互影响）
浅复制(copy)：拷贝父对象，不会拷贝对象的内部的子对象。（在父对象层级，相互完全独立；在子对象层级，始终相互影响）
深复制(deepcopy)： copy模块的deepcopy 方法，完全拷贝了父对象及其子对象。（相互完全独立）
'''
# 直接赋值，原列表和复制后的列表始终相互影响
lst = [[1, 2, 3], 4]
l_1 = lst
lst[0][0] = 5  # 更改列表l子对象中[1, 2, 3]中的第0个元素为5
lst[1] = 6  # 更改列表l父对象中第1个元素为6
print(lst)
print(l_1)

# 列表的浅复制:第一维列表元素（父对象层级）相互完全独立,第二维及其以后维度的元素（子对象层级）始终相互影响
l = [[1, 2, 3], 4]
l_2 = l.copy()
l[0][0] = 5  # 更改列表l子对象中[1, 2, 3]中的第0个元素为5
l[1] = 6  # 更改列表l父对象中第1个元素为6
print(l)
print(l_2)

# 列表的深复制,原列表和深复制的列表相互完全独立
import copy  # 使用深复制.deepcopy()方法要先导入copy库
l = [[1, 2, 3], 4]
l_2 = copy.deepcopy(l)
l[0][0] = 5  # 更改列表l子对象中[1, 2, 3]中的第0个元素为5
l[1] = 6  # 更改列表l父对象中第1个元素为6
print(l)
print(l_2)

# 4.使用del语句删除列表或者列表中的元素
'''
Python提供的del操作可以通过元素的位置索引来将其从列表中删除。
del与pop()不同，pop()会返回被删除的元素，del则不会。此外，del还可以用来删除子列表或整个列表。
'''
a = [-1, 1, 2, 3, 3, 4]
del a[0]  # 注意：列表每进行一次操作就会被更新，列表中的元素就不一定和第一次赋值时元素完全相同了
print(a)
del a[2:4]  # 此时的列表a = [1, 2, 3, 3, 4]
print(a)
del a[:]
print(a)
del a  # 列表被删除
# print(a) # 因为此时列表a已经不存在了，执行此语句会报错

# 5.列表解析
'''
列表解析（list comprehension），又叫列表推导式,常用于从集合对象中有选择地获取并计算元素。
列表解析比for更精简，运行更快，特别是对于较大的数据集合
列表解析元语法格式：
[expr for iter_var in iterable if cond_expr] # if cond_expr为可选项
[表达式 for语句 if语句（条件表达式）] # if语句（条件表达式）为可选项
'''
# 例4-8 创建平方数列表的方法比较。
squares = []
for x in range(10):
    squares.append(x**2)
print(squares)

# 列表解析语句可更加简便快捷地实现上述功能：
squares = [x**2 for x in range(10)]
print(squares)

# 使用列表解析语句将含有数值的列表转成字符串
list1 = ['a', 1, 'b']
list2 = [str(i) for i in list1]  # 使用列表解析语句，先把列表中的所有元素(主要是数值)转化为字符，并返回一个新列表
str1 = ''.join(list2)  # 使用join的方法将列表list2转化为字符串,'sep'.join(iterable) 连接字符串数组。
                       # 将iterable(可迭代对象）的元素以指定的字符sep(分隔符)连接生成一个新的字符串
str2 = ' '.join(list2)  # 以空格连接
print(str1)
print(str2)




